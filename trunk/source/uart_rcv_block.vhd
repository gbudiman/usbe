-- VHDL Entity My_Lib.rcv_block.symbol
--
-- Created:
--          by - mg28.bin (srge03.ecn.purdue.edu)
--          at - 17:32:01 09/23/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY uart_rcv_block IS
   PORT( 
      CLK       : IN     std_logic;
      --CLR_RBUF  : IN     std_logic;
      RST       : IN     std_logic;
      SERIAL_IN : IN     std_logic;
      KEY_ERROR : OUT    std_logic;
      PROG_ERROR: OUT    std_logic;
      PLAINKEY  : OUT    std_logic_vector(63 DOWNTO 0);
      --OE        : OUT    std_logic;
      RBUF_FULL : OUT    std_logic
      --RCV_DATA  : OUT    std_logic_vector (7 DOWNTO 0);
      --SBE       : OUT    std_logic
   );

-- Declarations

END uart_rcv_block ;

--
-- VHDL Architecture My_Lib.rcv_block.struct1
--
-- Created:
--          by - mg28.bin (srge03.ecn.purdue.edu)
--          at - 17:32:01 09/23/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE IEEE.std_logic_unsigned.all;

--LIBRARY UART_RCV;

ARCHITECTURE struct1 OF uart_rcv_block IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL CHK_ERROR     : STD_LOGIC;
   SIGNAL LOAD_DATA     : std_logic_vector(7 DOWNTO 0);
   SIGNAL RBUF_LOAD     : STD_LOGIC;
   SIGNAL SBC_CLR       : STD_LOGIC;
   SIGNAL SBC_EN        : STD_LOGIC;
   SIGNAL SB_DETECT     : std_logic;
   SIGNAL SET_RBUF_FULL : STD_LOGIC;
   SIGNAL SHIFT_STROBE  : STD_LOGIC;
   SIGNAL START_BIT     : std_logic;
   SIGNAL STOP_DATA     : std_logic_vector(1 DOWNTO 0);
   SIGNAL STOP_RCVING   : STD_LOGIC;
   SIGNAL TIMER_TRIG    : STD_LOGIC;
   SIGNAL CLR_RBUF      : STD_LOGIC;
   --SIGNAL KEY_ERROR     : std_logic;
   --SIGNAL PROG_ERROR    : std_logic;
   --SIGNAL SIG_TRUNCATED : std_logic;
   --SIGNAL PLAINKEY      : std_logic_vector (63 DOWNTO 0);
   SIGNAL SBE           : STD_LOGIC;
   SIGNAL OE            : STD_LOGIC;
   --SIGNAL RBUF_FULL     : STD_LOGIC;
   SIGNAL RCV_DATA      : STD_LOGIC_VECTOR(7 DOWNTO 0);

   -- Implicit buffer signal declarations
   SIGNAL RBUF_FULL_internal : std_logic;


   -- Component Declarations
   COMPONENT uart_edge_detector
   PORT (
      CLK       : IN     std_logic;
      RST       : IN     std_logic;
      SERIAL_IN : IN     std_logic;
      START_BIT : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT uart_error
   PORT (
      CHK_ERROR : IN     std_logic;
      CLK       : IN     std_logic;
      RBUF_FULL : IN     std_logic;
      RST       : IN     std_logic;
      OE        : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT uart_rcu
   PORT (
      CLK           : IN     STD_LOGIC;
      RST           : IN     STD_LOGIC;
      SB_DETECT     : IN     STD_LOGIC;
      START_BIT     : IN     STD_LOGIC;
      STOP_RCVING   : IN     STD_LOGIC;
      CHK_ERROR     : OUT    STD_LOGIC;
      RBUF_LOAD     : OUT    STD_LOGIC;
      SBC_CLR       : OUT    STD_LOGIC;
      SBC_EN        : OUT    STD_LOGIC;
      SET_RBUF_FULL : OUT    STD_LOGIC;
      TIMER_TRIG    : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT uart_rcv_buf
   PORT (
      CLK       : IN     std_logic;
      LOAD_DATA : IN     std_logic_vector (7 DOWNTO 0);
      LOAD_RBUF : IN     std_logic;
      RST       : IN     std_logic;
      RCV_DATA  : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT uart_rcv_buf_full
   PORT (
      CLK           : IN     std_logic;
      CLR_RBUF      : IN     std_logic;
      RST           : IN     std_logic;
      SET_RBUF_FULL : IN     std_logic;
      RBUF_FULL     : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT uart_sb_check
   PORT (
      CLK       : IN     std_logic;
      RST       : IN     std_logic;
      SBC_CLR   : IN     std_logic;
      SBC_EN    : IN     std_logic;
      STOP_DATA : IN     std_logic_vector (1 DOWNTO 0);
      SBE       : OUT    std_logic;
      SB_DETECT : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT uart_sr_10bit
   PORT (
      CLK          : IN     std_logic;
      RST          : IN     std_logic;
      SERIAL_IN    : IN     std_logic;
      SHIFT_STROBE : IN     std_logic;
      LOAD_DATA    : OUT    std_logic_vector (7 DOWNTO 0);
      STOP_DATA    : OUT    std_logic_vector (1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT uart_timer
   PORT (
      CLK          : IN     STD_LOGIC;
      RST          : IN     STD_LOGIC;
      TIMER_TRIG   : IN     STD_LOGIC;
      SHIFT_STROBE : OUT    STD_LOGIC;
      STOP_RCVING  : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT keyreg
   PORT (
      CLK           : IN    STD_LOGIC;
      RST           : IN    STD_LOGIC;
      SBE           : IN    STD_LOGIC;
      OE            : IN    STD_LOGIC;
      RBUF_FULL     : IN    STD_LOGIC;
      RCV_DATA      : IN    STD_LOGIC_VECTOR (7 DOWNTO 0);
      PLAINKEY      : OUT   STD_LOGIC_VECTOR (63 DOWNTO 0);
      KEY_ERROR     : OUT   STD_LOGIC;
      PROG_ERROR    : OUT   STD_LOGIC;
      CLR_RBUFF     : OUT   STD_LOGIC
    );
    END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   --FOR ALL : edge_detector USE ENTITY UART_RCV.edge_detector;
--   FOR ALL : error USE ENTITY UART_RCV.error;
--   FOR ALL : rcu USE ENTITY UART_RCV.rcu;
--   FOR ALL : rcv_buf USE ENTITY UART_RCV.rcv_buf;
--   FOR ALL : rcv_buf_full USE ENTITY UART_RCV.rcv_buf_full;
--   FOR ALL : sb_check USE ENTITY UART_RCV.sb_check;
--   FOR ALL : sr_10bit USE ENTITY UART_RCV.sr_10bit;
--   FOR ALL : timer USE ENTITY UART_RCV.timer;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_0 : uart_edge_detector
      PORT MAP (
         CLK       => CLK,
         RST       => RST,
         SERIAL_IN => SERIAL_IN,
         START_BIT => START_BIT
      );
   U_1 : uart_error
      PORT MAP (
         RST       => RST,
         CLK       => CLK,
         RBUF_FULL => RBUF_FULL_internal,
         CHK_ERROR => CHK_ERROR,
         OE        => OE
      );
   U_2 : uart_rcu
      PORT MAP (
         CLK           => CLK,
         RST           => RST,
         START_BIT     => START_BIT,
         STOP_RCVING   => STOP_RCVING,
         SB_DETECT     => SB_DETECT,
         RBUF_LOAD     => RBUF_LOAD,
         TIMER_TRIG    => TIMER_TRIG,
         CHK_ERROR     => CHK_ERROR,
         SET_RBUF_FULL => SET_RBUF_FULL,
         SBC_EN        => SBC_EN,
         SBC_CLR       => SBC_CLR
      );
   U_3 : uart_rcv_buf
      PORT MAP (
         CLK       => CLK,
         RST       => RST,
         LOAD_RBUF => RBUF_LOAD,
         LOAD_DATA => LOAD_DATA,
         RCV_DATA  => RCV_DATA
      );
   U_4 : uart_rcv_buf_full
      PORT MAP (
         CLK           => CLK,
         RST           => RST,
         CLR_RBUF      => CLR_RBUF,
         SET_RBUF_FULL => SET_RBUF_FULL,
         RBUF_FULL     => RBUF_FULL_internal
      );
   U_5 : uart_sb_check
      PORT MAP (
         RST       => RST,
         CLK       => CLK,
         SBC_CLR   => SBC_CLR,
         SBC_EN    => SBC_EN,
         STOP_DATA => STOP_DATA,
         SB_DETECT => SB_DETECT,
         SBE       => SBE
      );
   U_6 : uart_sr_10bit
      PORT MAP (
         CLK          => CLK,
         RST          => RST,
         SHIFT_STROBE => SHIFT_STROBE,
         SERIAL_IN    => SERIAL_IN,
         LOAD_DATA    => LOAD_DATA,
         STOP_DATA    => STOP_DATA
      );
   U_8: keyreg
      PORT MAP(
         CLK           => CLK,
         RST           => RST,
         SBE           => SBE,
         OE            => OE,
         RBUF_FULL     => RBUF_FULL_internal,
         RCV_DATA      => RCV_DATA,
         PLAINKEY      => PLAINKEY,
         KEY_ERROR     => KEY_ERROR,
         PROG_ERROR    => PROG_ERROR,
         CLR_RBUFF     => CLR_RBUF
      );
   U_7 : uart_timer
      PORT MAP (
         CLK          => CLK,
         RST          => RST,
         TIMER_TRIG   => TIMER_TRIG,
         STOP_RCVING  => STOP_RCVING,
         SHIFT_STROBE => SHIFT_STROBE
      );


   -- Implicit buffered output assignments
   RBUF_FULL <= RBUF_FULL_internal;

END struct1;
