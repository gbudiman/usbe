-- VHDL Entity My_Lib.memoryblock.symbol
--
-- Created:
--          by - mg28.bin (srge09.ecn.purdue.edu)
--          at - 15:10:30 11/27/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY memoryblock IS
   PORT( 
      CLK         : IN     STD_LOGIC;
      NEXT_BYTE   : IN     STD_LOGIC;
      RCV_DATA    : IN     STD_LOGIC_VECTOR (7 DOWNTO 0);
      RCV_OPCODE  : IN     STD_LOGIC_VECTOR (1 DOWNTO 0);
      RST         : IN     STD_LOGIC;
      W_ENABLE    : IN     STD_LOGIC;
      EMPTY       : OUT    STD_LOGIC;
      FULL        : OUT    STD_LOGIC;
      B_READY     : OUT    STD_LOGIC;
      PRGA_IN     : OUT    STD_LOGIC_VECTOR (7 DOWNTO 0);
      PRGA_OPCODE : OUT    STD_LOGIC_VECTOR (1 DOWNTO 0)
   );

-- Declarations

END memoryblock ;

--
-- VHDL Architecture My_Lib.memoryblock.struct
--
-- Created:
--          by - mg28.bin (srge09.ecn.purdue.edu)
--          at - 15:10:30 11/27/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE IEEE.std_logic_unsigned.all;

--IBRARY My_Lib;

ARCHITECTURE struct OF memoryblock IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL BYTE_COUNT : STD_LOGIC_VECTOR(4 DOWNTO 0);
   SIGNAL DATA       : STD_LOGIC_VECTOR(7 DOWNTO 0);
   SIGNAL OUT_OPCODE : STD_LOGIC_VECTOR(1 DOWNTO 0);
   SIGNAL R_ENABLE   : STD_LOGIC;


   -- Component Declarations
   COMPONENT rbuffer
   PORT (
      BYTE_COUNT  : IN     STD_LOGIC_VECTOR (4 DOWNTO 0);
      CLK         : IN     STD_LOGIC;
      DATA        : IN     STD_LOGIC_VECTOR (7 DOWNTO 0);
      NEXT_BYTE   : IN     STD_LOGIC;
      OPCODE      : IN     STD_LOGIC_VECTOR (1 DOWNTO 0);
      RST         : IN     STD_LOGIC;
      B_READY     : OUT    STD_LOGIC;
      PRGA_IN     : OUT    STD_LOGIC_VECTOR (7 DOWNTO 0);
      PRGA_OPCODE : OUT    STD_LOGIC_VECTOR (1 DOWNTO 0);
      R_ENABLE    : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT rfifo
   PORT (
      CLK        : IN     STD_LOGIC;
      RCV_DATA   : IN     STD_LOGIC_VECTOR (7 DOWNTO 0);
      RCV_OPCODE : IN     STD_LOGIC_VECTOR (1 DOWNTO 0);
      RST        : IN     STD_LOGIC;
      R_ENABLE   : IN     STD_LOGIC;
      W_ENABLE   : IN     STD_LOGIC;
      BYTE_COUNT : OUT    STD_LOGIC_VECTOR (4 DOWNTO 0);
      DATA       : OUT    STD_LOGIC_VECTOR (7 DOWNTO 0);
      EMPTY      : OUT    STD_LOGIC;
      FULL       : OUT    STD_LOGIC;
      OUT_OPCODE : OUT    STD_LOGIC_VECTOR (1 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   --FOR ALL : RBUFFER USE ENTITY My_Lib.RBUFFER;
   --FOR ALL : RFIFO USE ENTITY My_Lib.RFIFO;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_0 : rbuffer
      PORT MAP (
         CLK         => CLK,
         RST         => RST,
         NEXT_BYTE   => NEXT_BYTE,
         DATA        => DATA,
         OPCODE      => OUT_OPCODE,
         BYTE_COUNT  => BYTE_COUNT,
         B_READY     => B_READY,
         R_ENABLE    => R_ENABLE,
         PRGA_IN     => PRGA_IN,
         PRGA_OPCODE => PRGA_OPCODE
      );
   U_1 : rfifo
      PORT MAP (
         CLK        => CLK,
         RST        => RST,
         W_ENABLE   => W_ENABLE,
         R_ENABLE   => R_ENABLE,
         RCV_DATA   => RCV_DATA,
         RCV_OPCODE => RCV_OPCODE,
         DATA       => DATA,
         OUT_OPCODE => OUT_OPCODE,
         BYTE_COUNT => BYTE_COUNT,
         EMPTY      => EMPTY,
         FULL       => FULL
      );

END struct;
