-- VHDL Entity TRANSMITTER_BLOCK_LIB1.transmitter_block.symbol
--
-- Created:
--          by - mg46.bin (srge05.ecn.purdue.edu)
--          at - 21:05:43 12/02/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY transmitter_block IS
   PORT( 
      PRGA_OUT    : IN     std_logic_vector (7 DOWNTO 0);
      clk         : IN     std_logic;
      p_ready     : IN     std_logic;
      prga_opcode : IN     std_logic_vector (1 DOWNTO 0);
      rst         : IN     std_logic;
      SENDING     : OUT    std_logic;
      dm_tx_out   : OUT    std_logic;
      dp_tx_out   : OUT    std_logic;
      NEXT_BYTE   : OUT    std_logic
   );

-- Declarations

END transmitter_block ;

--
-- VHDL Architecture TRANSMITTER_BLOCK_LIB1.transmitter_block.struct
--
-- Created:
--          by - mg46.bin (srge05.ecn.purdue.edu)
--          at - 21:05:43 12/02/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE IEEE.STD_LOGIC_UNSIGNED.all;


ARCHITECTURE struct OF transmitter_block IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL EOP            : std_logic;
   SIGNAL SHIFT_ENABLE_E : std_logic;
   SIGNAL SHIFT_ENABLE_R : std_logic;
   SIGNAL TX_CRC         : std_logic_vector(15 DOWNTO 0);
   SIGNAL d_encode       : std_logic;
   SIGNAL send_data      : std_logic_vector(7 DOWNTO 0);
   SIGNAL t_bitstuff     : std_logic;
   SIGNAL t_strobe       : std_logic;

   -- Implicit buffer signal declarations
   SIGNAL SENDING_internal : std_logic;


   -- Component Declarations
   COMPONENT tx_CRC_CALC
   PORT (
      CLK         : IN     std_logic;
      PRGA_OPCODE : IN     std_logic_vector (1 DOWNTO 0);
      PRGA_OUT    : IN     std_logic_vector (7 DOWNTO 0);
      RST         : IN     std_logic;
      T_STROBE    : IN     std_logic;
      TX_CRC      : OUT    std_logic_vector (15 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT tx_encode
   PORT (
      EOP            : IN     std_logic;
      SHIFT_ENABLE_E : IN     std_logic;
      clk            : IN     std_logic;
      d_encode       : IN     std_logic;
      rst            : IN     std_logic;
      dm_tx_out      : OUT    std_logic;
      dp_tx_out      : OUT    std_logic;
      t_bitstuff     : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT tx_shiftreg
   PORT (
      SHIFT_ENABLE_R : IN     std_logic;
      clk            : IN     std_logic;
      rst            : IN     std_logic;
      send_data      : IN     std_logic_vector (7 DOWNTO 0);
      t_bitstuff     : IN     std_logic;
      t_strobe       : IN     std_logic;
      d_encode       : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT tx_tcu
   PORT (
      PRGA_OUT    : IN     std_logic_vector (7 DOWNTO 0);
      clk         : IN     std_logic;
      p_ready     : IN     std_logic;
      prga_opcode : IN     std_logic_vector (1 DOWNTO 0);
      rst         : IN     std_logic;
      t_bitstuff  : IN     std_logic;
      t_crc       : IN     std_logic_vector (15 DOWNTO 0);
      EOP         : OUT    std_logic;
      next_byte   : OUT    std_logic;
      send_data   : OUT    std_logic_vector (7 DOWNTO 0);
      sending     : OUT    std_logic;
      t_strobe    : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT tx_timer
   PORT (
      CLK            : IN     std_logic;
      RST            : IN     std_logic;
      SENDING        : IN     std_logic;
      SHIFT_ENABLE_E : OUT    std_logic;
      SHIFT_ENABLE_R : OUT    std_logic
   );
   END COMPONENT;


BEGIN

   -- Instance port mappings.
   U_1 : tx_CRC_CALC
      PORT MAP (
         CLK         => clk,
         RST         => rst,
         T_STROBE    => t_strobe,
         PRGA_OPCODE => prga_opcode,
         PRGA_OUT    => PRGA_OUT,
         TX_CRC      => TX_CRC
      );
   U_0 : tx_encode
      PORT MAP (
         clk            => clk,
         rst            => rst,
         SHIFT_ENABLE_E => SHIFT_ENABLE_E,
         d_encode       => d_encode,
         EOP            => EOP,
         t_bitstuff     => t_bitstuff,
         dp_tx_out      => dp_tx_out,
         dm_tx_out      => dm_tx_out
      );
   U_2 : tx_shiftreg
      PORT MAP (
         clk            => clk,
         rst            => rst,
         SHIFT_ENABLE_R => SHIFT_ENABLE_R,
         t_bitstuff     => t_bitstuff,
         t_strobe       => t_strobe,
         send_data      => send_data,
         d_encode       => d_encode
      );
   U_3 : tx_tcu
      PORT MAP (
         clk         => clk,
         rst         => rst,
         p_ready     => p_ready,
         t_bitstuff  => t_bitstuff,
         PRGA_OUT    => PRGA_OUT,
         prga_opcode => prga_opcode,
         t_crc       => TX_CRC,
         sending     => SENDING_internal,
         EOP         => EOP,
         next_byte   => NEXT_BYTE,
         send_data   => send_data,
         t_strobe    => t_strobe
      );
   U_4 : tx_timer
      PORT MAP (
         CLK            => clk,
         RST            => rst,
         SENDING        => SENDING_internal,
         SHIFT_ENABLE_R => SHIFT_ENABLE_R,
         SHIFT_ENABLE_E => SHIFT_ENABLE_E
      );

   -- Implicit buffered output assignments
   SENDING <= SENDING_internal;

END struct;
