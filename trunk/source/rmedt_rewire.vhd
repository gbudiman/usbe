-- VHDL Entity My_Lib.RMEDT_REWIRE.symbol
--
-- Created:
--          by - mg28.bin (srge06.ecn.purdue.edu)
--          at - 20:18:35 12/05/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY RMEDT_REWIRE IS
   PORT( 
      CLK          : IN     std_logic;
      DM1_RX       : IN     std_logic;
      DP1_RX       : IN     std_logic;
      RST          : IN     std_logic;
      SERIAL_IN    : IN     std_logic;
      BS_ERROR     : OUT    std_logic;
      CRC_ERROR    : OUT    std_logic;
      EMPTY        : OUT    STD_LOGIC;
      FULL         : OUT    STD_LOGIC;
      KEY_ERROR    : OUT    std_logic;
      PROG_ERROR   : OUT    std_logic;
      PARITY_ERROR : OUT    std_logic;
      RBUF_FULL    : OUT    std_logic;
      R_ERROR      : OUT    std_logic;
      SENDING      : OUT    std_logic;
      dm_tx_out    : OUT    std_logic;
      dp_tx_out    : OUT    std_logic
   );

-- Declarations

END RMEDT_REWIRE ;

--
-- VHDL Architecture My_Lib.RMEDT_REWIRE.struct
--
-- Created:
--          by - mg28.bin (srge06.ecn.purdue.edu)
--          at - 20:18:35 12/05/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE IEEE.STD_LOGIC_UNSIGNED.all;

--LIBRARY My_Lib;

ARCHITECTURE struct OF RMEDT_REWIRE IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL B_READY        : STD_LOGIC;
   SIGNAL EOP_external   : std_logic;
   SIGNAL NEXT_BYTE      : std_logic;
   SIGNAL OPCODE         : std_logic_vector(1 DOWNTO 0);
   SIGNAL PDATA_READY    : STD_LOGIC;
   SIGNAL PRGA_IN        : STD_LOGIC_VECTOR(7 DOWNTO 0);
   SIGNAL PRGA_OPCODE    : STD_LOGIC_VECTOR(1 DOWNTO 0);
   SIGNAL PROCESSED_DATA : STD_LOGIC_VECTOR(7 DOWNTO 0);
   SIGNAL RCV_DATA       : std_logic_vector(7 DOWNTO 0);
   SIGNAL W_ENABLE       : std_logic;


   -- Component Declarations
   COMPONENT EDBlock
   PORT (
      BYTE           : IN     STD_LOGIC_VECTOR (7 DOWNTO 0);
      BYTE_READY     : IN     STD_LOGIC;
      CLK            : IN     std_logic;
      OPCODE         : IN     STD_LOGIC_VECTOR (1 DOWNTO 0);
      RST            : IN     std_logic;
      SERIAL_IN      : IN     std_logic;
      KEY_ERROR      : OUT    std_logic;
      PARITY_ERROR   : OUT    std_logic;
      PDATA_READY    : OUT    STD_LOGIC;
      PROCESSED_DATA : OUT    STD_LOGIC_VECTOR (7 DOWNTO 0);
      PROG_ERROR     : OUT    std_logic;
      RBUF_FULL      : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT memoryblock
   PORT (
      CLK         : IN     STD_LOGIC;
      EOP         : IN     STD_LOGIC;
      NEXT_BYTE   : IN     STD_LOGIC;
      RCV_DATA    : IN     STD_LOGIC_VECTOR (7 DOWNTO 0);
      RCV_OPCODE  : IN     STD_LOGIC_VECTOR (1 DOWNTO 0);
      RST         : IN     STD_LOGIC;
      W_ENABLE    : IN     STD_LOGIC;
      B_READY     : OUT    STD_LOGIC;
      EMPTY       : OUT    STD_LOGIC;
      FULL        : OUT    STD_LOGIC;
      PRGA_IN     : OUT    STD_LOGIC_VECTOR (7 DOWNTO 0);
      PRGA_OPCODE : OUT    STD_LOGIC_VECTOR (1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT receiver_block_rewire
   PORT (
      CLK          : IN     std_logic;
      DM1_RX       : IN     std_logic;
      DP1_RX       : IN     std_logic;
      RST          : IN     std_logic;
      BS_ERROR     : OUT    std_logic;
      CRC_ERROR    : OUT    std_logic;
      EOP_external : OUT    std_logic;
      OPCODE       : OUT    std_logic_vector (1 DOWNTO 0);
      RCV_DATA     : OUT    std_logic_vector (7 DOWNTO 0);
      R_ERROR      : OUT    std_logic;
      W_ENABLE     : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT transmitter_block
   PORT (
      PRGA_OUT    : IN     std_logic_vector (7 DOWNTO 0);
      clk         : IN     std_logic;
      p_ready     : IN     std_logic;
      prga_opcode : IN     std_logic_vector (1 DOWNTO 0);
      rst         : IN     std_logic;
      NEXT_BYTE   : OUT    std_logic;
      SENDING     : OUT    std_logic;
      dm_tx_out   : OUT    std_logic;
      dp_tx_out   : OUT    std_logic
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   --FOR ALL : EDBlock USE ENTITY My_Lib.EDBlock;
   --FOR ALL : memoryblock USE ENTITY My_Lib.memoryblock;
   --FOR ALL : receiver_block_rewire USE ENTITY My_Lib.receiver_block_rewire;
   --FOR ALL : transmitter_block USE ENTITY My_Lib.transmitter_block;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_0 : EDBlock
      PORT MAP (
         BYTE           => PRGA_IN,
         BYTE_READY     => B_READY,
         CLK            => CLK,
         OPCODE         => PRGA_OPCODE,
         RST            => RST,
         SERIAL_IN      => SERIAL_IN,
         KEY_ERROR      => KEY_ERROR,
         PARITY_ERROR   => PARITY_ERROR,
         PDATA_READY    => PDATA_READY,
         PROCESSED_DATA => PROCESSED_DATA,
         PROG_ERROR     => PROG_ERROR,
         RBUF_FULL      => RBUF_FULL
      );
   U_1 : memoryblock
      PORT MAP (
         CLK         => CLK,
         NEXT_BYTE   => NEXT_BYTE,
         RCV_DATA    => RCV_DATA,
         RCV_OPCODE  => OPCODE,
         RST         => RST,
         W_ENABLE    => W_ENABLE,
         EOP         => EOP_external,
         EMPTY       => EMPTY,
         FULL        => FULL,
         B_READY     => B_READY,
         PRGA_IN     => PRGA_IN,
         PRGA_OPCODE => PRGA_OPCODE
      );
   U_2 : receiver_block_rewire
      PORT MAP (
         CLK          => CLK,
         DM1_RX       => DM1_RX,
         DP1_RX       => DP1_RX,
         RST          => RST,
         BS_ERROR     => BS_ERROR,
         CRC_ERROR    => CRC_ERROR,
         EOP_external => EOP_external,
         OPCODE       => OPCODE,
         RCV_DATA     => RCV_DATA,
         R_ERROR      => R_ERROR,
         W_ENABLE     => W_ENABLE
      );
   U_3 : transmitter_block
      PORT MAP (
         PRGA_OUT    => PROCESSED_DATA,
         clk         => CLK,
         p_ready     => PDATA_READY,
         prga_opcode => PRGA_OPCODE,
         rst         => RST,
         SENDING     => SENDING,
         dm_tx_out   => dm_tx_out,
         dp_tx_out   => dp_tx_out,
         NEXT_BYTE   => NEXT_BYTE
      );

END struct;
