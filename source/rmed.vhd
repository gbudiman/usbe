-- VHDL Entity My_Lib.RMED.symbol
--
-- Created:
--          by - mg28.bin (srge02.ecn.purdue.edu)
--          at - 17:12:14 11/30/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY RMED IS
   PORT( 
      CLK            : IN     std_logic;
      DM1_RX         : IN     std_logic;
      DP1_RX         : IN     std_logic;
      NEXT_BYTE      : IN     STD_LOGIC;
      RST            : IN     std_logic;
      SERIAL_IN      : IN     std_logic;
      CRC_ERROR      : OUT    std_logic;
      EMPTY          : OUT    STD_LOGIC;
      FULL           : OUT    STD_LOGIC;
      KEY_ERROR      : OUT    std_logic;
      PDATA_READY    : OUT    STD_LOGIC;
      PRGA_OPCODE    : OUT    STD_LOGIC_VECTOR (1 DOWNTO 0);
      PROCESSED_DATA : OUT    STD_LOGIC_VECTOR (7 DOWNTO 0);
      PROG_ERROR     : OUT    std_logic;
      RBUF_FULL      : OUT    std_logic;
      R_ERROR        : OUT    std_logic
   );

-- Declarations

END RMED ;

--
-- VHDL Architecture My_Lib.RMED.struct
--
-- Created:
--          by - mg28.bin (srge02.ecn.purdue.edu)
--          at - 17:12:14 11/30/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ARCHITECTURE struct OF RMED IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL B_READY      : STD_LOGIC;
   SIGNAL EOP_EXTERNAL : std_logic;
   SIGNAL OPCODE       : std_logic_vector(1 DOWNTO 0);
   SIGNAL PRGA_IN      : STD_LOGIC_VECTOR(7 DOWNTO 0);
   SIGNAL RCV_DATA     : std_logic_vector(7 DOWNTO 0);
   SIGNAL W_ENABLE     : std_logic;

   -- Implicit buffer signal declarations
   SIGNAL PRGA_OPCODE_internal : STD_LOGIC_VECTOR (1 DOWNTO 0);


   -- Component Declarations
   COMPONENT EDBlock
   PORT (
      BYTE           : IN     STD_LOGIC_VECTOR (7 DOWNTO 0);
      BYTE_READY     : IN     STD_LOGIC ;
      CLK            : IN     std_logic ;
      OPCODE         : IN     STD_LOGIC_VECTOR (1 DOWNTO 0);
      RST            : IN     std_logic ;
      SERIAL_IN      : IN     std_logic ;
      KEY_ERROR      : OUT    std_logic ;
      PDATA_READY    : OUT    STD_LOGIC ;
      PROCESSED_DATA : OUT    STD_LOGIC_VECTOR (7 DOWNTO 0);
      PROG_ERROR     : OUT    std_logic ;
      RBUF_FULL      : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Receiver_Block
   PORT (
      CLK          : IN     std_logic;
      DM1_RX       : IN     std_logic;
      DP1_RX       : IN     std_logic;
      RST          : IN     std_logic;
      CRC_ERROR    : OUT    std_logic;
      EOP_EXTERNAL : OUT    std_logic;
      OPCODE       : OUT    std_logic_vector (1 DOWNTO 0);
      RCV_DATA     : OUT    std_logic_vector (7 DOWNTO 0);
      R_ERROR      : OUT    std_logic;
      W_ENABLE     : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT memoryblock
   PORT (
      CLK         : IN     STD_LOGIC;
      EOP         : IN     STD_LOGIC;
      NEXT_BYTE   : IN     STD_LOGIC;
      RCV_DATA    : IN     STD_LOGIC_VECTOR (7 DOWNTO 0);
      RCV_OPCODE  : IN     STD_LOGIC_VECTOR (1 DOWNTO 0);
      RST         : IN     STD_LOGIC;
      W_ENABLE    : IN     STD_LOGIC;
      B_READY     : OUT    STD_LOGIC;
      EMPTY       : OUT    STD_LOGIC;
      FULL        : OUT    STD_LOGIC;
      PRGA_IN     : OUT    STD_LOGIC_VECTOR (7 DOWNTO 0);
      PRGA_OPCODE : OUT    STD_LOGIC_VECTOR (1 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   --FOR ALL : EDBlock USE ENTITY My_Lib.EDBlock;
   --FOR ALL : Receiver_Block USE ENTITY My_Lib.Receiver_Block;
   --FOR ALL : memoryblock USE ENTITY My_Lib.memoryblock;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_0 : EDBlock
      PORT MAP (
         BYTE           => PRGA_IN,
         BYTE_READY     => B_READY,
         CLK            => CLK,
         OPCODE         => PRGA_OPCODE_internal,
         RST            => RST,
         SERIAL_IN      => SERIAL_IN,
         KEY_ERROR      => KEY_ERROR,
         PDATA_READY    => PDATA_READY,
         PROCESSED_DATA => PROCESSED_DATA,
         PROG_ERROR     => PROG_ERROR,
         RBUF_FULL      => RBUF_FULL
      );
   U_2 : Receiver_Block
      PORT MAP (
         CLK          => CLK,
         DM1_RX       => DM1_RX,
         DP1_RX       => DP1_RX,
         RST          => RST,
         EOP_EXTERNAL => EOP_EXTERNAL,
         CRC_ERROR    => CRC_ERROR,
         OPCODE       => OPCODE,
         RCV_DATA     => RCV_DATA,
         R_ERROR      => R_ERROR,
         W_ENABLE     => W_ENABLE
      );
   U_1 : memoryblock
      PORT MAP (
         CLK         => CLK,
         NEXT_BYTE   => NEXT_BYTE,
         RCV_DATA    => RCV_DATA,
         RCV_OPCODE  => OPCODE,
         RST         => RST,
         W_ENABLE    => W_ENABLE,
         EOP         => EOP_EXTERNAL,
         EMPTY       => EMPTY,
         FULL        => FULL,
         B_READY     => B_READY,
         PRGA_IN     => PRGA_IN,
         PRGA_OPCODE => PRGA_OPCODE_internal
      );

   -- Implicit buffered output assignments
   PRGA_OPCODE <= PRGA_OPCODE_internal;

END struct;
